// Generated by CoffeeScript 1.8.0
(function() {
  var BaseStorage;

  BaseStorage = (function() {
    var AWS, path;

    AWS = require('aws-sdk');

    path = require('path');

    function BaseStorage(file) {
      AWS.config.loadFromPath(path.normalize(file));
      this.s3 = new AWS.S3();
    }

    BaseStorage.prototype.bucket = function() {
      return {
        head: function(bucket, callback) {
          var params;
          params = this.create_params(bucket, null);
          return this.s3.headBucket(params, (function(_this) {
            return function(err, data) {
              return callback(err, data);
            };
          })(this));
        },
        list: function(callback) {
          return this.s3.listBuckets(null, function(err, data) {
            if (data != null) {
              console.log(data.Buckets);
            }
            return callback(err, data);
          });
        },
        create: function(bucket, callback, params) {
          if (params == null) {
            params = {};
          }
          params = this.create_params(bucket, null, params);
          return this.bucket.head(bucket, (function(_this) {
            return function(err, data) {
              if ((err != null ? err.statusCode : void 0) === 404) {
                return _this.s3.createBucket(params, function(err, data) {
                  return callback(err, data);
                });
              } else {
                return callback(err, data);
              }
            };
          })(this));
        },
        "delete": function(bucket, callback) {
          var params;
          params = this.create_params(bucket, null);
          return this.bucket.head(bucket, (function(_this) {
            return function(err, data) {
              if ((err != null ? err.statusCode : void 0) === 404) {
                return callback(null, data);
              } else if ((err != null ? err.statusCode : void 0) === 403) {
                return callback(err, data);
              } else if ((err != null ? err.statusCode : void 0) === 301) {
                return callback(err, data);
              } else {
                return _this.s3.deleteBucket(params, function(err, data) {
                  return callback(err, data);
                });
              }
            };
          })(this));
        },
        force_delete: function(bucket, callback) {
          return this.bucket.head(bucket, (function(_this) {
            return function(err, data) {
              if ((err != null ? err.statusCode : void 0) === 404) {
                return callback(null, data);
              } else if ((err != null ? err.statusCode : void 0) === 403) {
                return callback(err, data);
              } else {
                return _this.list_objects(bucket, function(err, data) {
                  var params;
                  if (err) {
                    return callback(err, data);
                  } else {
                    if (data.Contents.length !== 0) {
                      return _this.object.deletes(bucket, data.Contents, function(err, data) {
                        var params;
                        if (err) {
                          return callback(err, data);
                        } else {
                          params = _this.create_params(bucket, null);
                          return _this.s3.deleteBucket(params, function(err, data) {
                            return callback(err, data);
                          });
                        }
                      });
                    } else {
                      params = _this.create_params(bucket, null);
                      return _this.s3.deleteBucket(params, function(err, data) {
                        return callback(err, data);
                      });
                    }
                  }
                });
              }
            };
          })(this));
        }
      };
    };

    BaseStorage.prototype.object = function() {
      return {
        "delete": function(bucket, key, callback) {
          var params;
          params = this.create_params(bucket, key);
          return this.object.head(bucket, key, (function(_this) {
            return function(err, data) {
              if ((err != null ? err.statusCode : void 0) === 404) {
                return callback(null, data);
              } else if ((err != null ? err.statusCode : void 0) === 403) {
                return callback(err, data);
              } else {
                return _this.s3.deleteObject(params, function(err, data) {
                  return callback(err, data);
                });
              }
            };
          })(this));
        },
        deletes: function(bucket, deletes, callback, params) {
          var key, keys, _i, _len;
          if (params == null) {
            params = {};
          }
          params = this.create_params(bucket, null, params);
          keys = [];
          for (_i = 0, _len = deletes.length; _i < _len; _i++) {
            key = deletes[_i];
            keys.push({
              Key: key.Key
            });
          }
          params.Delete = {
            Objects: keys
          };
          return this.s3.deleteObjects(params, function(err, data) {
            console.log("delete_objects");
            return callback(err, data);
          });
        },
        version: function(bucket, callback) {
          var params;
          params = this.create_params(bucket, null);
          return this.s3.getBucketVersioning(params, (function(_this) {
            return function(err, data) {
              return callback(err, data);
            };
          })(this));
        },
        acl: function(params, callback) {
          return this.s3.getBucketAcl(params, function(err, data) {
            if (data != null) {
              console.log(data.Grants);
            }
            return callback(err, data);
          });
        },
        get: function(params, callback) {
          return this.s3.getObject(params, function(err, data) {
            return callback(err, data);
          });
        },
        head: function(bucket, key, callback) {
          var params;
          params = this.create_params(bucket, key);
          return this.s3.headObject(params, (function(_this) {
            return function(err, data) {
              return callback(err, data);
            };
          })(this));
        },
        put: function(bucket, key, callback, params) {
          if (params == null) {
            params = {};
          }
          params = this.create_params(bucket, key, params);
          return this.s3.putObject(params, function(err, data) {
            return callback(err, data);
          });
        },
        list: function(bucket, callback, params) {
          if (params == null) {
            params = {};
          }
          params = this.create_params(bucket, null, params);
          return this.s3.listObjects(params, (function(_this) {
            return function(err, data) {
              if (data != null) {
                console.log(data.Contents);
              }
              return callback(err, data);
            };
          })(this));
        }
      };
    };

    BaseStorage.prototype.create_params = function(bucket, key, params) {
      if (params == null) {
        params = {};
      }
      if (bucket != null) {
        params.Bucket = bucket;
      }
      if (key != null) {
        params.Key = key;
      }
      return params;
    };

    return BaseStorage;

  })();

  module.exports = BaseStorage;

}).call(this);
